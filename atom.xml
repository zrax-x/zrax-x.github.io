<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从零开始的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-20T01:07:36.866Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zraxx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020数字中国虎符CTF之GM&amp;McEliece</title>
    <link href="http://yoursite.com/2020/04/20/2020%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF%E4%B9%8BGM&amp;McEliece/"/>
    <id>http://yoursite.com/2020/04/20/2020%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E8%99%8E%E7%AC%A6CTF%E4%B9%8BGM&amp;McEliece/</id>
    <published>2020-04-20T07:00:00.000Z</published>
    <updated>2020-04-20T01:07:36.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GM"><a href="#GM" class="headerlink" title="GM"></a>GM</h3><p>根据<code>pow(q ** 2 * x, (p-1)/2, p) + pow(p ** 2 * x, (q-1)/2, q) == N - phi - 1</code>可以得出<code>pow(x, (p-1)/2, p) == -1</code>。同时<code>(pow(x, int(br + bi, 2), N) * r ** 2) % N</code>等价于$x^{br<em>2+bi}</em>r^2\mod N$, 将其记为$a$，然后计算。$a^{(p-1)/2}\mod p$。我们把$a$代入化简，得到$x^{br<em>2</em>(p-1)/2}<em>x^{bi</em>(p-1)/2}<em>r^{2</em>(p-1)/2}\mod p$，由于第一项和第三项的结果一定为1，因此，当$bi=1$时，整个式子的结果为-1，$bi=0$时整个式子的结果为1。据此，我们可以判断某一位是0还是1。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author: zraxx</span></span><br><span class="line"><span class="comment">#date: 2020-4-19</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">f = f.readlines()</span><br><span class="line"></span><br><span class="line">phin = int(f[<span class="number">0</span>].strip())</span><br><span class="line">n = int(f[<span class="number">1</span>].strip())</span><br><span class="line">enc = eval(f[<span class="number">2</span>].strip())</span><br><span class="line"></span><br><span class="line">a = n-phin+<span class="number">1</span></span><br><span class="line"><span class="comment"># print iroot(a**2-4*n, 2)</span></span><br><span class="line">p = (a+iroot(a**<span class="number">2</span><span class="number">-4</span>*n, <span class="number">2</span>)[<span class="number">0</span>])//<span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> n%p==<span class="number">0</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> enc:</span><br><span class="line"><span class="keyword">if</span> pow(x, (p<span class="number">-1</span>)//<span class="number">2</span>, p) == <span class="number">1</span>:</span><br><span class="line">res = res + <span class="string">'0'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res = res + <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(res,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><p><strong>FLAG: flag{bd4f1790-f4a2-4904-b4d2-8db8b24fd864}</strong></p><h3 id="McEliece"><a href="#McEliece" class="headerlink" title="McEliece"></a>McEliece</h3><p>根据pubkey可以得出，加密时plain长为28bit，结果为64bit，错误码中6位为1。由于flag中的字符类型有限，可以直接爆破，计算的结果$uG’$和题目给出的加密的结果$uG’+e$应该满足海明距离小于等于6。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#author: zraxx</span></span><br><span class="line"><span class="comment">#date: 2020-4-19</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">pubkey=load(<span class="string">"./pubkey.sobj"</span>)</span><br><span class="line">cipher=load(<span class="string">"./cipher.sobj"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(plain)</span>:</span></span><br><span class="line"><span class="keyword">return</span> plain*pubkey</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">same</span><span class="params">(a, b)</span>:</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(a.ncols()):</span><br><span class="line"><span class="keyword">if</span> a[<span class="number">0</span>,i] == b[<span class="number">0</span>,i]:</span><br><span class="line">sum += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">l = <span class="number">28</span></span><br><span class="line">t = <span class="string">"0123456789abcdef-&#125;"</span></span><br><span class="line">len = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">"flag&#123;c9"</span></span><br><span class="line">prev_cand=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len&lt;<span class="number">12</span>:</span><br><span class="line"><span class="keyword">print</span> len</span><br><span class="line">cand = <span class="string">""</span></span><br><span class="line">iter = product(t, repeat=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> iter:</span><br><span class="line">tmp = flag+<span class="string">""</span>.join(x)</span><br><span class="line">bin = BinaryStrings()</span><br><span class="line">msg = map(int ,str(bin.encoding(tmp)))</span><br><span class="line">plain = matrix(GF(<span class="number">2</span>),<span class="number">1</span>,l)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(l):</span><br><span class="line">plain[<span class="number">0</span>,j] = msg[l*len+j]</span><br><span class="line"><span class="keyword">if</span> same(cipher[len], encrypt(plain))&gt;<span class="number">52</span>:</span><br><span class="line"><span class="keyword">if</span> len%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">prev_cand.append(x[<span class="number">3</span>])</span><br><span class="line">cand = x</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> x[<span class="number">0</span>] <span class="keyword">in</span> prev_cand:</span><br><span class="line">flag += <span class="string">""</span>.join(x)</span><br><span class="line">prev_cand = []</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> len%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">flag+=<span class="string">""</span>.join(cand[:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line">len += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;c941a3cc-85e3-4401-a0f1-764206e71bf3&#125;</span></span><br></pre></td></tr></table></figure><p><strong>FLAG: flag{c941a3cc-85e3-4401-a0f1-764206e71bf3}</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;GM&quot;&gt;&lt;a href=&quot;#GM&quot; class=&quot;headerlink&quot; title=&quot;GM&quot;&gt;&lt;/a&gt;GM&lt;/h3&gt;&lt;p&gt;根据&lt;code&gt;pow(q ** 2 * x, (p-1)/2, p) + pow(p ** 2 * x, (q-1)/2, q) ==
        
      
    
    </summary>
    
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Linux Hook技术介绍</title>
    <link href="http://yoursite.com/2020/04/18/Linux-Hook%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/04/18/Linux-Hook%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-04-18T07:00:00.000Z</published>
    <updated>2020-04-20T01:09:47.089Z</updated>
    
    <content type="html"><![CDATA[<p>Linux常见的hook技术主要有四种，分别为内核模块hook，应用层inline hook，应用层Got hook以及应用层preload hook。下面具体介绍一下</p><h3 id="内核模块hook"><a href="#内核模块hook" class="headerlink" title="内核模块hook"></a>内核模块hook</h3><blockquote><p>通常是从内核源码特殊位置，修改回调、修改中断表；或修改重编译内核，导出内部函数，从而跳转到自定义函数，开发内核模块实现hook。 </p><p>其特性如下：</p><ul><li>可以拦截到所有应用层系统调用，应用层无法绕过</li><li>开发调试复杂，测试周期长，升级和卸载内核模块带来稳定性问题</li></ul></blockquote><h3 id="应用层inline-Hook"><a href="#应用层inline-Hook" class="headerlink" title="应用层inline Hook"></a>应用层inline Hook</h3><blockquote><p>应用层内联hook，即直接修改二进制函数体的汇编指令，修改执行逻辑使其跳转到自定义函数，开发应用层模块实现hook。 </p><p>其特性如下：</p><ul><li>可以拦截到系统调用和普通库函数</li><li>由于linux系统本身具有多个发行版本及指令集，不容易做到通用</li><li>可以通过自定义实现底层函数或恢复模块内存方式绕过</li></ul></blockquote><h3 id="应用层Got-Hook"><a href="#应用层Got-Hook" class="headerlink" title="应用层Got Hook"></a>应用层Got Hook</h3><blockquote><p>应用层got表hook，即在运行阶段修改程序本身got表，这样调用api的逻辑，就会相应的跳转到用户自定义函数中。</p><ul><li>可以拦截系统调用和普通库函数</li><li>由于只需要考虑ELF格式因此实现难度较为简单</li><li>可以通过自定义实现底层函数或恢复got表内存方式绕过</li></ul></blockquote><h3 id="Preload-Hook"><a href="#Preload-Hook" class="headerlink" title="Preload Hook"></a>Preload Hook</h3><blockquote><p>  Preload Hook是指利用系统支持的preload能力，将模块自动注入进程实现hook。可以通过以下手段使用Preload技术：一种是环境变量配置(LD_PRELOAD)；另一种是文件配置：(/etc/ld.so.preload)。</p><ul><li>若使用命令行指定LD_PRELOAD则只影响该新进程及子进程；若写入全局环境变量则LD_PRELOAD对所有新进程生效；父进程可以控制子进程的环境变量从而取消preload</li><li>文件preload方式影响所有新进程且无法被取消</li><li>可以拦截到系统调用和普通库函数</li><li>实现和操作最为简单，只需要编写同名系统调用函数即可实现hook</li><li>可以使用动态调用方式或自定义实现方式绕过</li></ul></blockquote><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.jianshu.com/p/69e6089a7291" target="_blank" rel="noopener">https://www.jianshu.com/p/69e6089a7291</a></p><p><a href="https://www.jianshu.com/p/f78b16bd8905" target="_blank" rel="noopener">https://www.jianshu.com/p/f78b16bd8905</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Linux常见的hook技术主要有四种，分别为内核模块hook，应用层inline hook，应用层Got hook以及应用层preload hook。下面具体介绍一下&lt;/p&gt;
&lt;h3 id=&quot;内核模块hook&quot;&gt;&lt;a href=&quot;#内核模块hook&quot;
        
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Hook" scheme="http://yoursite.com/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>Linux终端控制打印字符的颜色</title>
    <link href="http://yoursite.com/2020/04/17/Linux%E7%BB%88%E7%AB%AF%E6%8E%A7%E5%88%B6%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6%E7%9A%84%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2020/04/17/Linux%E7%BB%88%E7%AB%AF%E6%8E%A7%E5%88%B6%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6%E7%9A%84%E9%A2%9C%E8%89%B2/</id>
    <published>2020-04-18T01:05:04.854Z</published>
    <updated>2020-04-18T01:05:24.499Z</updated>
    
    <content type="html"><![CDATA[<p>格式：\033[控制码;背景颜色;前景颜色m字符串\033[0m </p><p><em>注意：\033可以替换为\x1b，同指 Esc ，各个属性的范围不同，因此不会混淆</em></p><p><strong>前景色：</strong>30-37</p><p><strong>背景色：</strong>40-47</p><p><strong>控制码：</strong></p><blockquote><p>\33[0m 关闭所有属性<br>\33[1m 设置高亮度<br>\33[4m 下划线<br>\33[5m 闪烁<br>\33[7m 反显<br>\33[8m 消隐<br>\33[30m — \33[37m 设置前景色<br>\33[40m — \33[47m 设置背景色<br>\33[nA 光标上移n行<br>\33[nB 光标下移n行<br>\33[nC 光标右移n行<br>\33[nD 光标左移n行<br>\33[y;xH设置光标位置<br>\33[2J 清屏<br>\33[K 清除从光标到行尾的内容<br>\33[s 保存光标位置<br>\33[u 恢复光标位置<br>\33[?25l 隐藏光标<br>\33[?25h 显示光标</p></blockquote><p><strong>以下为常用的三种类型</strong></p><p>\x1b[1;31m字符串\x1b[0m    <font color="red"> 高亮红色字体（error）</font></p><p>\x1b[1;33m字符串\x1b[0m    <font color="yellow"> 高亮黄色字体（info）</font></p><p>\x1b[1;34m字符串\x1b[0m    <font color="blue"> 高亮蓝色字体（debug）</font></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;格式：\033[控制码;背景颜色;前景颜色m字符串\033[0m &lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：\033可以替换为\x1b，同指 Esc
        
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>VolgaCTF-2020-Keygreed-WP</title>
    <link href="http://yoursite.com/2020/04/17/VolgaCTF-Keygreed/"/>
    <id>http://yoursite.com/2020/04/17/VolgaCTF-Keygreed/</id>
    <published>2020-04-18T00:52:57.376Z</published>
    <updated>2020-04-18T00:45:39.965Z</updated>
    
    <content type="html"><![CDATA[<p>关于mov attack，可以参考这篇<a href="https://blog.csdn.net/qq_26060285/article/details/90482755" target="_blank" rel="noopener">博客</a></p><p>下面简单说说这道题</p><p>首先我们可以验证这个椭圆曲线是超奇异的(supersingular)，在这里 $p^2 - 1 = 0\mod p.order()$</p><blockquote><p>The MOV attack works by using the <a href="https://en.wikipedia.org/wiki/Weil_pairing" target="_blank" rel="noopener">Weil pairing</a> (e: $E[m]×E[m]→μ_m$) to translate solving the dlog in the elliptic curve group to solving it in the multiplicative group $μ_m$ (group of m-th roots of unity), where sub-exponential algorithms exist. </p><p>Then, working in $F_{p^k}$ (extension of $F_p$), take Q to be a point in $E[m]$ (group of m-torsion points), such that P,Q are linearly independent, which can be constructed. Finally, take $e(P,Q)$ and $e(xP,Q)=e(P,Q)^x$ (due to bilinearity of e) as a dlog instance over a fininte field (m-th roots of unity), this is true by the non-degeneracy of the Weil pairing.</p></blockquote><p>因此这里的关键就是找到点Q，然后便把问题转化为了一个离散对数问题，寻找点Q的步骤如下</p><ol><li>在$F_{p^k}$上随机选取一个点，记为$R$</li><li>计算$m=R.order()$</li><li>计算$d=gcd(m,P.order)$</li><li>得到$Q=(m//d)*R$</li></ol><p>得到$Q$后，由于$Q=k*P$，因此问题就变得简单了很多。</p><p>好了，到了这里，事实上我还是没有搞懂MOV attack的具体原理，也没有讲清楚这道题的具体解法。不过没关系，后续可以慢慢理解，而且我认为我已经把MOV attack中的最重要的一个环节简单的阐述了一下。</p><p>Anyway，如果想看看这道题的具体解法，可以参考这篇<a href="https://sectt.github.io/writeups/Volga20/crypto_keygreed/README" target="_blank" rel="noopener">WriteUp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;关于mov attack，可以参考这篇&lt;a href=&quot;https://blog.csdn.net/qq_26060285/article/details/90482755&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="密码学" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="ECC" scheme="http://yoursite.com/tags/ECC/"/>
    
      <category term="MOV attack" scheme="http://yoursite.com/tags/MOV-attack/"/>
    
  </entry>
  
  <entry>
    <title>Linux下批量kill多个同名进程</title>
    <link href="http://yoursite.com/2020/04/16/Linux%E4%B8%8B%E6%89%B9%E9%87%8Fkill%E5%A4%9A%E4%B8%AA%E5%90%8C%E5%90%8D%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/04/16/Linux%E4%B8%8B%E6%89%B9%E9%87%8Fkill%E5%A4%9A%E4%B8%AA%E5%90%8C%E5%90%8D%E8%BF%9B%E7%A8%8B/</id>
    <published>2020-04-17T06:54:25.292Z</published>
    <updated>2020-04-17T08:24:08.762Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>循序渐进</p><p>第一步：ps -ef | grep [name] 筛选出同名的所有进程</p><p>第二步：ps -ef | grep [name] | grep -v grep 将第一步中的grep进程删除</p><p>第三步：ps -ef | grep [name] | grep -v grep | cut -c 1-5 截断获取所有的pid号，这里cut的作用就是截取，1-5的作用是根据下标取出pid号，类似于python的切片，需要根据实际情况来调整</p><p>第四步：ps -ef | grep [name] | grep -v grep | cut -c 1-5 | xargs kill -9 将之前的所有pid作为kill命令的参数 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;循序渐进&lt;/p&gt;
&lt;p&gt;第一步：ps -ef | grep [name] 筛选出同名的所有进程&lt;/p&gt;
&lt;p&gt;第二步：ps -ef | grep [name] | grep -v grep 将第一步中的grep进程删除&lt;/p&gt;
&lt;p&gt;第三步：ps
        
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
